---
title: "Thoughts on Rates: a Chart Pack, Fall 2022"
author: "Art Steinmetz"
format: html
mainfont: Arial
editor: visual
execute: 
   echo: false
   warning: false
   freeze: false
---

# Part Three:  Brass Tacks


Problems: 
Data leakage.  The inputs and outputs are highly serially correlated so the training set looks much like the test set even before stratifying.
```{r}
library(tidyverse)
library(tidymodels)
library(lubridate)
library(ggridges)



# CREATE MODELS ----------------------------------
load(file="data/feature_set.rdata")
load(file="data/outcome_set.rdata")

# chose actual_change variable
term = "6 Month"
feature_set <- feature_set %>% 
  mutate(actual_change = outcome_set$TSY10_lead24)
         

# remove all but one actual_change variable
feature_set2 <- feature_set %>% 
  drop_na() %>% 
  select(-date) %>% 
  filter(slope < 0.5) %>% 
  identity()

#set.seed(4321)
rates_split <- initial_time_split(feature_set2,prop = 0.90)
rates_test <- testing(rates_split)
rates_train <- training(rates_split)

# test stratification
rates_train %>% ggplot(aes(actual_change)) + 
  geom_density() +
  geom_density(data=rates_test,aes(actual_change),color = "red")
```


```{r}
# linear regresssion
lm_model <- linear_reg() %>% 
  set_engine("lm")

  

lm_form_fit <- 
  lm_model %>% 
  fit(actual_change ~ ., data = rates_train)


rates_test %>% bind_cols(predict(lm_form_fit,rates_test)) %>% 
  ggplot(aes(actual_change,.pred)) + geom_point()
```


```{r random_forest}
# random forest
rf_model <- rand_forest(trees = 1000, min_n = 5) %>% 
  set_engine("ranger",importance = "impurity") %>% 
  set_mode("regression")


rf_form_fit <- 
  rf_model %>% 
  fit(actual_change ~ ., data = rates_train)

# plot predictions
rates_test %>% 
  bind_cols(predict(rf_form_fit,rates_test)) %>% 
  ggplot(aes(actual_change,.pred)) + geom_point()
```


```{r}
rf_form_fit$fit$variable.importance %>% 
  enframe %>% 
  arrange(value) %>% 
  mutate(name = as_factor(name)) %>% 
  ggplot(aes(name,value)) + geom_col() + 
  coord_flip()
```


```{r xgboost}
xg_model <- boost_tree(trees = 1000, min_n = 3) %>% 
  set_engine("xgboost") %>% 
  set_mode("regression")


xg_form_fit <- 
  xg_model %>% 
  fit(actual_change ~ CPI + FEDTAR + slope, data = rates_train)

# plot predictions
rates_test %>% 
  bind_cols(predict(xg_form_fit,rates_test)) %>% 
  ggplot(aes(actual_change,.pred)) + geom_point()

```


```{r plot_predict}
feature_set2 <- feature_set

pred <- predict(xg_form_fit,rates_test) %>% 
  bind_cols(tail(feature_set2,nrow(rates_test)))  %>% 
  pivot_longer(cols=c(".pred","actual_change"),names_to = 'type',values_to = 'Yld_Change')

pred %>% 
  ggplot(aes(date,Yld_Change,color=type)) + geom_line() + 
  labs(title = "Out-of-Sample Stinks",
       subtitle = glue::glue("Actual {term} Change in Yield vs. Predicted"),
       color = "")

```

Lower our sights.  Try to just predict up or down.

```{r predict xg class}
# xgboost much better than random forest
feature_set2 <- feature_set %>% 
  mutate(actual_class = as.character(actual_change<0)) %>% 
  mutate(actual_class = forcats::fct_recode(actual_class,
                                            lower = "TRUE",higher = "FALSE")) %>% 
  select(-date,-actual_change) %>% 
  identity()
rates_split <- initial_time_split(feature_set2,prop = 0.90)
rates_test <- testing(rates_split)
rates_train <- training(rates_split)

xg_model <- boost_tree(trees = 1000, min_n = 3) %>% 
  set_engine("xgboost") %>% 
  set_mode("classification")

xg_form_fit <- 
  xg_model %>% 
  fit(actual_class ~ CPI + FEDTAR + slope, data = rates_train)

# predict xg
results <- rates_test %>% 
  bind_cols(predict(xg_form_fit,rates_test))

conf_mat(results,truth = actual_class, estimate = .pred_class)
# rates_test %>% group_by(actual_class) %>% count()
```

```{r}
accuracy(results,truth = actual_class, estimate = .pred_class)
```
```{r predict rf class}
# xgboost much better than random forest
feature_set2 <- feature_set %>% 
  mutate(actual_class = as.character(actual_change<0)) %>% 
  mutate(actual_class = forcats::fct_recode(actual_class,
                                            lower = "TRUE",higher = "FALSE")) %>% 
  select(-date,-actual_change) %>% 
  identity()
rates_split <- initial_time_split(feature_set2,prop = 0.90)
rates_test <- testing(rates_split)
rates_train <- training(rates_split)

rf_model <- rand_forest(trees = 1000, min_n = 3) %>% 
  set_engine("ranger") %>% 
  set_mode("classification")

rf_form_fit <- 
  rf_model %>% 
  fit(actual_class ~ CPI + FEDTAR + slope, data = rates_train)

# predict xg
results <- rates_test %>% 
  bind_cols(predict(rf_form_fit,rates_test))

conf_mat(results,truth = actual_class, estimate = .pred_class)
# rates_test %>% group_by(actual_class) %>% count()
```
```{r}
accuracy(results,truth = actual_class, estimate = .pred_class)
```
```{r slope tiggers}
load(file="data/feature_set.rdata")
# chose actual_change variable
term = "6 Month"
outcome_set <- feature_set %>% 
  timetk::tk_augment_leads(TSY10,.lags = -c(4,12,26,52)) %>%
  transmute(date,TSY10,slope,across(contains("lead"),.fns = function(x) x - TSY10)) %>% 
  pivot_longer(cols = contains("lead"),names_to = "lead",values_to = "change") %>% 
  mutate(lead = as_factor(lead))

levels(outcome_set$lead) <- c("Next Mo","Next 3 Mo","Next 6 Mo","Next Year")


slope_outcomes <- outcome_set %>% 
  transmute(date,TSY10,slope,lead,change,slope_ranges = cut(slope,seq(-3,4, by = 0.5)))
# plot return distribution --------------------------------
slope_outcomes %>%
  drop_na() %>% 
  filter(slope < 1) %>% 
  ggplot(aes(y=slope_ranges,x=change,fill = stat(x))) +
  geom_density_ridges_gradient(scale = 2) +
#  scale_x_continuous(labels = scales::percent) +
  facet_wrap(~lead,scales = "fixed") +
  scale_fill_viridis_c(name = "Yld Change", option = "C")
```

```{r}

summary_outcomes <- slope_outcomes %>% 
  drop_na() %>% 
  filter(slope < 1.5) %>% 
  group_by(slope_ranges,lead) %>% 
  summarise(median_change = median(change),
            avg_change = mean(change)) 

summary_outcomes %>% arrange(median_change)
```
```{r}
summary_outcomes %>% 
  ggplot(aes(slope_ranges,lead,fill = median_change))  + geom_tile() + 
  theme_minimal() +
  scale_fill_viridis_c(name = "Yld Change", option = "C")
```

